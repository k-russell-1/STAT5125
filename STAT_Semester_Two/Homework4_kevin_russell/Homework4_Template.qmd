---
title: "Homework 4 Template"
author: Kevin Russell
format: 
  html:
    embed-resources: true
---

# Problem 1 [30 Points Total]

### Question (i). 7 points.

The ANSUR II MALE Public.csv and ANSUR II FEMALE Public.csv files are available on HuskyCT. Read these files into R, then combine them into a single a data frame containing one row for each individual.

From this data frame, create a new data frame called "measurements" comprised of the following columns in the following order:

- subjectid
- sex
- Age
- forearmcenterofgriplength
- forearmcircumferenceflexed
- forearmhandlength
- handbreadth
- handcircumference
- handlength
- palmlength
- thumbtipreach
- wristcircumference
- anklecircumference
- balloffootcircumference
- balloffootlength
- calfcircumference
- footbreadthhorizontal
- footlength
- heelanklecircumference
- heelbreadth
- kneeheightmidpatella
- kneeheightsitting

```{r}
library(dplyr)
library(tidyverse)
library(ggplot2)
library(jpeg)
library(raster)
library(rvest)
library(tiff)
```

```{r}
male <- read.csv("C:/Users/kruss/Downloads/ANSUR II MALE Public(1).csv")
female <- read.csv("C:/Users/kruss/Downloads/ANSUR II FEMALE Public.csv")
```


```{r}
both <- bind_rows(male, female)
```

```{r}
measurements <- both |>
  dplyr::select(subjectid, Gender, Age, forearmcenterofgriplength, forearmcircumferenceflexed, forearmhandlength, handbreadth, handcircumference, handlength, palmlength, thumbtipreach, wristcircumference, anklecircumference, balloffootcircumference, balloffootlength, calfcircumference, footbreadthhorizontal, footlength, heelanklecircumference, heelbreadth, kneeheightmidpatella, kneeheightsitting)
```

```{r}
measurements <- measurements |>
  mutate(sex = Gender)
```

```{r}
measurements <- measurements |>
  dplyr::select(subjectid, sex, Age, forearmcenterofgriplength, forearmcircumferenceflexed, forearmhandlength, handbreadth, handcircumference, handlength, palmlength, thumbtipreach, wristcircumference, anklecircumference, balloffootcircumference, balloffootlength, calfcircumference, footbreadthhorizontal, footlength, heelanklecircumference, heelbreadth, kneeheightmidpatella, kneeheightsitting)
```

### Question (ii). 8 points.

Run principal component analysis (the scaled version) on the measurements data obtained in (i), excluding the variables sex, Age, and subjectid.

Make a graphic depicting the percentage of the variance explained by each of the principal components. 

```{r}
library(broom)
pca <- measurements |>
  dplyr::select(!c(sex, Age, subjectid)) |>
  prcomp()

pca_analysis <- pca |>
  tidy(matrix = "pcs")

pca_analysis |>
  ggplot(aes(x = PC, y = percent)) +
  geom_bar(stat = "identity") +
  labs(y = "Percent of Variation")
```

What percentage of the variance is explained by the first four components together? 

```{r}
#93.898% of the variation.
pca_analysis
```


### Question (iii). 7 points.

Visualize the factor loadings for the first four principal components. Can they be interpreted? Try your best to interpret all four. Don't worry if your interpretations are slightly vague.

```{r}
library(broom)
measpc_loadings <- pca |>
  tidy(matrix = "loadings")

measpc_scores <- pca |> 
  tidy(pmatrix = "scores")

measpc_variances <- pca |>
  tidy(matrix = "pcs")
```

```{r}
measpc_loadings |>
  filter(PC <=4) |>
  ggplot(aes(y = column,
             x = value)) +
  geom_col(aes(y = column)
           ) + 
  facet_wrap(~PC)
```
```{r}
#1 seems to reflect size as a whole-- all factors have a positive value.
#2 seems to reflect circumference and breadth versus length. 
#3 isn't readily clear, but it could be something like limb length versus other measurements. Knee height observations are very positive, along with some of the forearm measurements, while hand measurements are negative. 
#4 seems to reflect the difference between lower body and upper body-- hand/forearm measurements are negative, while knee height and calf/ankle circumference
```




### Question (iv). 8 points.

Of the first four components, do any appear to share a relationship with the sex of the subjects? Do any share a relationship with Age? Please provide visualizations to explain how you reached these conclusions. You do not need to perform formal statistical tests.

```{r}
# We store PC scores for each row
measpc_scores_wider <- measpc_scores |>
  pivot_wider(names_from  = PC,
              names_prefix = "PC")

measpc_scores_wider |>
  glimpse()
```

```{r}
measpc_scores_wider <- measurements |>
  bind_cols(measpc_scores_wider) |>
  dplyr::select(-row)

measpc_scores_wider |>
  glimpse()
```


```{r}
measpc_scores_wider |> 
  dplyr::select(c(sex, PC1, PC2, PC3, PC4)) |>
  pivot_longer(starts_with("PC"),
               names_to = "PC") |>
  ggplot(aes(x = value,
             color = sex)) +
  geom_density() +
  facet_wrap(~PC, 
             scales = "free")

# PC1, PC4, and perhaps PC2 share a relationship with sex. PC3 does not appear to do so. 
```
```{r}
# Make a categorical variable that separates under 30 from 30s from over 40
measpc_scores_wider <- measpc_scores_wider |>
  mutate(age_cat = ifelse(Age < 30, "Under 30", ifelse(Age <= 40, "30-40", "Over 40")))
```


```{r}
measpc_scores_wider |> 
  dplyr::select(c(age_cat, PC1, PC2, PC3, PC4)) |>
  pivot_longer(starts_with("PC"),
               names_to = "PC") |>
  ggplot(aes(x = value,
             color = age_cat)) +
  geom_density() +
  facet_wrap(~PC, 
             scales = "free")
# If anything, PC1 and PC4 may have some relationship with the categorical variable age_cat. This makes sense, as measurements shouldn't really vary much between fully grown adults of different ages.
```




# Problem 2 [25 Points]

Recall the handwritten digit images we read into R for Homework 3. These digits were taken from the MNIST dataset. In this question, we will also work with data from the MNIST database.

I constructed the file one_image_data.csv using 4684 images of handwritten numbers. Each row corresponds to a handwritten number one. The column observation_id assigns a unique identifying number to each image. The remaining columns, with names of form x.._y.. describe the pixel value of the image at the spatial coordinate given the values trailing x and y.

For example, Question (i) depicts the image corresponding to the first row in the csv.
 
### Question (i). 10 points.

Read the dataset into R using read_csv(). Then, manipulate the data using tidyverse verbs and use ggplot with geom_raster() to recreate the image below corresponding to the first row of the csv.

```{r}
images <- read_csv("C:/Users/kruss/Downloads/one_image_data.csv")

images_one <- images |>
  slice(1)
```
```{r}
images_one <- images_one |>
  pivot_longer(
    cols = starts_with("x"),
    names_to = c("x", "y"), 
    names_pattern = "x(.*)_y(.*)",
    values_to = "value"
  )
```

```{r}
images_one <- images_one |>
  mutate(x = parse_number(x),
         y = parse_number(y))
```

```{r}
images_one |>
  ggplot(aes(x = x,
             y = y,
             fill = value)) + 
  geom_raster() +
  scale_fill_gradient(low = "white", 
                      high = "black")  +
  coord_fixed()
```



### Question (ii). 5 points.

Next, filter such that pixels with intensity less than 0.5 are removed, then point the image as a point cloud using geom_point(). The result should resemble the following.

```{r}
images_one_filtered <- images_one |>
  dplyr::select(x, y, value) |>
  filter(value >= 0.5)
```

```{r}
images_one_filtered |>
  ggplot(aes(x = x,
             y = y)) + 
  geom_point() +
  scale_fill_gradient(low = "white", 
                      high = "black")  +
  coord_fixed() +
  xlim(0,28) + 
  ylim(0,28)
```


### Question (iii). 10 points.

Next, use Principal Component Analysis to align the image such that the handwritten digit runs approximately parallel to the vertical axis. The result should resemble the following image. Remember that you may have to flip the sign on the x and or y values.

```{r}
pca <- images_one_filtered |>
  dplyr::select(x,
                y) |>
  prcomp()

pca$rotation
# Definitely not straight up and down right now
```
```{r}
scores <- pca |>
  tidy(matrix = "scores") |>
  head()
```

```{r}
pca$x
```


```{r}
im_one_aligned <- images_one_filtered  |>
  mutate(x = pca$x[,2],
         y = pca$x[,1])
```

```{r}
im_one_aligned |>
ggplot(aes(x = -x,
           y = -y)) + 
  geom_point() +
  coord_fixed() +
    xlim(-30,30) + 
  ylim(-30,30) + 
  labs(x = "-PC2", y = "-PC1")
```


# Problem 3 [45 Points]

This problem will use the same data as Problem 2. However, rather than focusing on just first image, we shall analyze the entire dataset to understand the structure of variability in handwritten ones. 

### Question (i). 5 Points.

Using the original data you originally read in, compute principal component analysis on all the the pixel columns: x1_y28 through x28_y1.

```{r}
pca <- images |>
  dplyr::select(x1_y28:x28_y1) |>
  prcomp()

pca_analysis <- pca |>
  tidy(matrix = "pcs")

pca_analysis |>
  ggplot(aes(x = PC, y = percent)) +
  geom_bar(stat = "identity") +
  labs(y = "Percent of Variation")
```

### Question (ii). 5 Points.

What percentage of the variance is described by each of the first 6 principal components? Report your answer as a table.

```{r}
#69.456% of the variation.
pca_analysis
```

### Question (iii). 5 Points.

What percentage of the variance is explained by principal components 100 through 784? Report your answer as a number.

```{r}
#3.122% of the variation
sum(pca_analysis$percent[100:784])
```


### Question (iv). 15 Points.

Visualize the loadings for the top six principal components by arranging them into a faceted image as follows. Doing so will require data manipulation and geom_pixel().

```{r}
image_loadings <- pca |>
  tidy(matrix = "loadings")
```

```{r}
image_loadings_work <- image_loadings |>
  mutate(x = parse_number(column),
         y = as.numeric(str_extract(column, "(?<=_y)\\d+"))) |>
  dplyr::select(-column)
```


```{r}
image_loadings_work |>
  filter(PC <= 6) |>
  ggplot(aes(y = y,
             x = x,
             fill = value)) +
  geom_raster() +
  scale_fill_gradient2(low = "dark red", mid = "white", high = "dark blue") +
  facet_wrap(~PC)
```

These are the directions along which ones tend to vary. Can you interpret PC1? 

PC1 contrasts the angles at which the digits is drawn. Negative values correspond to left-to-right drawings, and positive is vice versa.


### Question (v). 12 Points.

To further understand how digits differ along these principal components, let's visualize the four images with the highest and lowest scores corresponding to each of PC1, PC2, PC3, and PC4.

Your solution should resemble the following for PC1.

Highest four for PC1:

```{r}
df_PCA_1 <- data.frame(
  val = pca$x[, 1],  
  obs = 1:4684
)

df_PCA_1 <- df_PCA_1 |>
  arrange(desc(val)) |>
  slice(1:4)

images_one_highest <- images |>
  slice(c(df_PCA_1$obs)) |>
  pivot_longer(
    cols = starts_with("x"),
    names_to = c("x", "y"), 
    names_pattern = "x(.*)_y(.*)",
    values_to = "value"
)
images_one_highest <- images_one_highest |>
  mutate(x = parse_number(x),
         y = parse_number(y))

images_one_highest |>
  ggplot(aes(x = x,
             y = y,
             fill = value)) + 
  geom_raster() +
  scale_fill_gradient(low = "white", 
                      high = "black")  +
  coord_fixed() +
  facet_wrap(~observation_id)
```

Lowest four for PC1:

```{r}
df_PCA_1 <- data.frame(
  val = pca$x[, 1],  
  obs = 1:4684
)

df_PCA_1 <- df_PCA_1 |>
  arrange(val) |>
  slice(1:4)

images_one_lowest <- images |>
  slice(c(df_PCA_1$obs)) |>
  pivot_longer(
    cols = starts_with("x"),
    names_to = c("x", "y"), 
    names_pattern = "x(.*)_y(.*)",
    values_to = "value"
)
images_one_lowest <- images_one_lowest |>
  mutate(x = parse_number(x),
         y = parse_number(y))

images_one_lowest |>
  ggplot(aes(x = x,
             y = y,
             fill = value)) + 
  geom_raster() +
  scale_fill_gradient(low = "white", 
                      high = "black")  +
  coord_fixed() +
  facet_wrap(~observation_id)
```

Similarly, complete PC2, PC3, and PC4.

```{r}
df_PCA_2 <- data.frame(
  val = pca$x[, 2],  
  obs = 1:4684
)

df_PCA_2 <- df_PCA_2 |>
  arrange(desc(val)) |>
  slice(1:4)

images_two_highest <- images |>
  slice(c(df_PCA_2$obs)) |>
  pivot_longer(
    cols = starts_with("x"),
    names_to = c("x", "y"), 
    names_pattern = "x(.*)_y(.*)",
    values_to = "value"
)
images_two_highest <- images_two_highest |>
  mutate(x = parse_number(x),
         y = parse_number(y))

images_two_highest |>
  ggplot(aes(x = x,
             y = y,
             fill = value)) + 
  geom_raster() +
  scale_fill_gradient(low = "white", 
                      high = "black")  +
  coord_fixed() +
  facet_wrap(~observation_id)
```
```{r}
df_PCA_2 <- data.frame(
  val = pca$x[, 2],  
  obs = 1:4684
)

df_PCA_2 <- df_PCA_2 |>
  arrange(val) |>
  slice(1:4)

images_two_lowest <- images |>
  slice(c(df_PCA_2$obs)) |>
  pivot_longer(
    cols = starts_with("x"),
    names_to = c("x", "y"), 
    names_pattern = "x(.*)_y(.*)",
    values_to = "value"
)
images_two_lowest <- images_two_lowest |>
  mutate(x = parse_number(x),
         y = parse_number(y))

images_two_lowest |>
  ggplot(aes(x = x,
             y = y,
             fill = value)) + 
  geom_raster() +
  scale_fill_gradient(low = "white", 
                      high = "black")  +
  coord_fixed() +
  facet_wrap(~observation_id)
```
```{r}
df_PCA_3 <- data.frame(
  val = pca$x[, 3],  
  obs = 1:4684
)

df_PCA_3 <- df_PCA_3 |>
  arrange(desc(val)) |>
  slice(1:4)

images_three_highest <- images |>
  slice(c(df_PCA_3$obs)) |>
  pivot_longer(
    cols = starts_with("x"),
    names_to = c("x", "y"), 
    names_pattern = "x(.*)_y(.*)",
    values_to = "value"
)
images_three_highest <- images_three_highest |>
  mutate(x = parse_number(x),
         y = parse_number(y))

images_three_highest |>
  ggplot(aes(x = x,
             y = y,
             fill = value)) + 
  geom_raster() +
  scale_fill_gradient(low = "white", 
                      high = "black")  +
  coord_fixed() +
  facet_wrap(~observation_id)
```
```{r}
df_PCA_3 <- data.frame(
  val = pca$x[, 3],  
  obs = 1:4684
)

df_PCA_3 <- df_PCA_3 |>
  arrange(val) |>
  slice(1:4)

images_three_lowest <- images |>
  slice(c(df_PCA_3$obs)) |>
  pivot_longer(
    cols = starts_with("x"),
    names_to = c("x", "y"), 
    names_pattern = "x(.*)_y(.*)",
    values_to = "value"
)
images_three_lowest <- images_three_lowest |>
  mutate(x = parse_number(x),
         y = parse_number(y))

images_three_lowest |>
  ggplot(aes(x = x,
             y = y,
             fill = value)) + 
  geom_raster() +
  scale_fill_gradient(low = "white", 
                      high = "black")  +
  coord_fixed() +
  facet_wrap(~observation_id)
```
```{r}
df_PCA_4 <- data.frame(
  val = pca$x[, 4],  
  obs = 1:4684
)

df_PCA_4 <- df_PCA_4 |>
  arrange(desc(val)) |>
  slice(1:4)

images_four_highest <- images |>
  slice(c(df_PCA_4$obs)) |>
  pivot_longer(
    cols = starts_with("x"),
    names_to = c("x", "y"), 
    names_pattern = "x(.*)_y(.*)",
    values_to = "value"
)
images_four_highest <- images_four_highest |>
  mutate(x = parse_number(x),
         y = parse_number(y))

images_four_highest |>
  ggplot(aes(x = x,
             y = y,
             fill = value)) + 
  geom_raster() +
  scale_fill_gradient(low = "white", 
                      high = "black")  +
  coord_fixed() +
  facet_wrap(~observation_id)
```
```{r}
df_PCA_4 <- data.frame(
  val = pca$x[, 4],  
  obs = 1:4684
)

df_PCA_4 <- df_PCA_4 |>
  arrange(val) |>
  slice(1:4)

images_four_lowest <- images |>
  slice(c(df_PCA_4$obs)) |>
  pivot_longer(
    cols = starts_with("x"),
    names_to = c("x", "y"), 
    names_pattern = "x(.*)_y(.*)",
    values_to = "value"
)
images_four_lowest <- images_four_lowest |>
  mutate(x = parse_number(x),
         y = parse_number(y))

images_four_lowest |>
  ggplot(aes(x = x,
             y = y,
             fill = value)) + 
  geom_raster() +
  scale_fill_gradient(low = "white", 
                      high = "black")  +
  coord_fixed() +
  facet_wrap(~observation_id)
```


Which of the four largest principal components do you find the easiest to interpret? Why?

PC3 is the easiest to interpret. The high values outputted very skinny handwritten ones, while the low values outputted very fat handwritten ones.

### Question (vi). 3 Points.

If we were to rotate all the images using the technique used in problem 2, would we still expect the leading principal components to stay the same? Which of the top four might stay, and which might go?

No coding is required for answering this question. I just want you to speculate and provide justification.


PC3 likely would stay, as it does not have much to do with the angle at which the digit is written. I think PC1 might stay as well, since it's picking out which ones are sloped left-to-right versus which are right-to-left (which could differentiate right-handed authors from left-handed authors). The others, however, are less clear, and I would not be surprised if they were to be rendered less significant with a rotation.


